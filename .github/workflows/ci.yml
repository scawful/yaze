name: CI/CD Pipeline

on:
  push:
    branches: [ "master", "develop" ]
    paths:
      - 'src/**'
      - 'test/**'
      - 'cmake/**'
      - 'CMakeLists.txt'
      - '.github/workflows/**'
  pull_request:
    branches: [ "master", "develop" ]
    paths:
      - 'src/**'
      - 'test/**'
      - 'cmake/**'
      - 'CMakeLists.txt'
      - '.github/workflows/**'

env:
  BUILD_TYPE: RelWithDebInfo

jobs:
  build-and-test:
    name: "${{ matrix.name }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Ubuntu 22.04 (GCC-12)"
            os: ubuntu-22.04
            cc: gcc-12
            cxx: g++-12
          - name: "macOS 14 (Clang)"
            os: macos-14
            cc: clang
            cxx: clang++
          - name: "Windows 2022 (MSVC)"
            os: windows-2022
            cc: cl
            cxx: cl

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up vcpkg (Windows only)
      if: runner.os == 'Windows'
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: 'c8696863d371ab7f46e213d8f5ca923c4aef2a00'
        runVcpkgInstall: true

    - name: Install Dependencies
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          sudo apt-get update
          sudo apt-get install -y \
            build-essential ninja-build pkg-config \
            libglew-dev libxext-dev libwavpack-dev libabsl-dev libboost-all-dev \
            libpng-dev python3-dev libpython3-dev \
            libasound2-dev libpulse-dev libaudio-dev \
            libx11-dev libxrandr-dev libxcursor-dev libxinerama-dev libxi-dev \
            libxss-dev libxxf86vm-dev libxkbcommon-dev libwayland-dev libdecor-0-dev \
            libgtk-3-dev libdbus-1-dev \
            ${{ matrix.cc }} ${{ matrix.cxx }}
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          brew install ninja pkg-config
        fi

    - name: Configure
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          cmake -B build -G "Visual Studio 17 2022" -A x64 \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake \
            -DYAZE_MINIMAL_BUILD=ON \
            -DYAZE_ENABLE_ROM_TESTS=OFF
        else
          cmake -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_C_COMPILER=${{ matrix.cc }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} \
            -DYAZE_MINIMAL_BUILD=ON \
            -DYAZE_ENABLE_ROM_TESTS=OFF
        fi

    - name: Build
      run: cmake --build build --config ${{ env.BUILD_TYPE }} --parallel

    - name: Test (Core)
      working-directory: build
      run: |
        ctest --build-config ${{ env.BUILD_TYPE }} --output-on-failure -j1 \
          -R "AsarWrapperTest|SnesTileTest|CompressionTest|SnesPaletteTest|HexTest|MessageTest"

    - name: Test (Additional - Informational)
      working-directory: build
      continue-on-error: true
      run: |
        ctest --build-config ${{ env.BUILD_TYPE }} --output-on-failure --parallel \
          -R ".*Test" -E ".*RomTest.*|.*E2E.*|.*ZSCustomOverworld.*|.*IntegrationTest.*|CpuTest|Spc700Test|ApuTest"

  code-quality:
    name: "âœ¨ Code Quality"
    runs-on: ubuntu-22.04
    continue-on-error: ${{ github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/') }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Tools
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format-14 clang-tidy-14 cppcheck
    
    - name: Check Formatting
      run: find src test -name "*.cc" -o -name "*.h" | xargs clang-format-14 --dry-run --Werror
    
    - name: Run cppcheck
      run: |
        cppcheck --enable=warning,style,performance --error-exitcode=0 \
          --suppress=missingIncludeSystem --suppress=unusedFunction --inconclusive src/
    
    - name: Run clang-tidy
      run: |
        find src -name "*.cc" -not -path "*/lib/*" | head -20 | \
          xargs clang-tidy-14 --header-filter='src/.*\.(h|hpp)$'

  memory-sanitizer:
    name: "ðŸ”¬ Memory Sanitizer"
    runs-on: ubuntu-22.04
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential ninja-build clang-14 libc++-14-dev libc++abi-14-dev \
          libglew-dev libxext-dev libwavpack-dev libpng-dev libgtk-3-dev libdbus-1-dev
    
    - name: Configure with AddressSanitizer
      run: |
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_C_COMPILER=clang-14 \
          -DCMAKE_CXX_COMPILER=clang++-14 \
          -DCMAKE_CXX_FLAGS="-fsanitize=address -fno-omit-frame-pointer" \
          -DYAZE_MINIMAL_BUILD=ON
    
    - name: Build
      run: cmake --build build --parallel
    
    - name: Test
      working-directory: build
      env:
        ASAN_OPTIONS: detect_leaks=1:abort_on_error=1
      run: ctest --output-on-failure

  z3ed-agent-test:
    name: "ðŸ¤– z3ed Agent"
    runs-on: macos-14
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Dependencies
      run: brew install ollama ninja
    
    - name: Build z3ed
      run: |
        cmake -B build_test -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DZ3ED_AI=ON \
          -DYAZE_BUILD_Z3ED=ON
        cmake --build build_test --target z3ed
    
    - name: Start Ollama
      run: |
        ollama serve & 
        sleep 10
        ollama pull qwen2.5-coder:7b
    
    - name: Run Test Suite
      run: |
        chmod +x scripts/agent_test_suite.sh
        ./scripts/agent_test_suite.sh ollama
