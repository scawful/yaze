name: Validate Visual Studio Builds

on:
  push:
    branches: [ "master", "develop" ]
    paths:
      - 'vcpkg.json'
      - 'src/**'
      - 'scripts/generate-vs-projects.py'
      - 'scripts/validate-vs-build.ps1'
      - '.github/workflows/validate-vs-build.yml'
  pull_request:
    branches: [ "master", "develop" ]
    paths:
      - 'vcpkg.json'
      - 'src/**'
      - 'scripts/generate-vs-projects.py'
      - 'scripts/validate-vs-build.ps1'
      - '.github/workflows/validate-vs-build.yml'

env:
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

jobs:
  validate-vs-builds:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Windows x64 Debug"
            platform: x64
            configuration: Debug
            
          - name: "Windows x64 Release"
            platform: x64
            configuration: Release
            

    name: ${{ matrix.name }}
    runs-on: windows-2022

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: 'c8696863d371ab7f46e213d8f5ca923c4aef2a00'
        runVcpkgInstall: true
        vcpkgJsonGlob: '**/vcpkg.json'
        vcpkgDirectory: '${{ github.workspace }}/vcpkg'
      env:
        VCPKG_FORCE_SYSTEM_BINARIES: 1
        VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

    - name: Validate Visual Studio Build
      shell: pwsh
      run: |
        $ErrorActionPreference = "Stop"
        
        Write-Host "========================================" -ForegroundColor Cyan
        Write-Host "YAZE Visual Studio Build Validation" -ForegroundColor Cyan
        Write-Host "Platform: ${{ matrix.platform }}" -ForegroundColor Yellow
        Write-Host "Configuration: ${{ matrix.configuration }}" -ForegroundColor Yellow
        Write-Host "========================================" -ForegroundColor Cyan
        
        # Check if we're in the right directory
        if (-not (Test-Path "yaze.sln")) {
            Write-Error "yaze.sln not found. Please run this script from the project root directory."
            exit 1
        }
        
        Write-Host "✓ yaze.sln found" -ForegroundColor Green
        
        # Ensure build directory exists
        if (-not (Test-Path "build")) {
            New-Item -ItemType Directory -Path "build" | Out-Null
        }
        
        # Build using MSBuild
        Write-Host "Building with MSBuild..." -ForegroundColor Yellow
        $msbuildArgs = @(
            "yaze.sln"
            "/p:Configuration=${{ matrix.configuration }}"
            "/p:Platform=${{ matrix.platform }}"
            "/p:VcpkgEnabled=true"
            "/p:VcpkgManifestInstall=true"
            "/m"  # Multi-processor build
            "/verbosity:minimal"
        )
        
        Write-Host "MSBuild command: msbuild $($msbuildArgs -join ' ')" -ForegroundColor Gray
        & msbuild @msbuildArgs
        
        if ($LASTEXITCODE -ne 0) {
            Write-Error "MSBuild failed with exit code $LASTEXITCODE"
            exit 1
        }
        
        Write-Host "✓ Build completed successfully" -ForegroundColor Green
        
        # Verify executable was created
        $exePath = "build\bin\${{ matrix.configuration }}\yaze.exe"
        if (-not (Test-Path $exePath)) {
            Write-Error "Executable not found at expected path: $exePath"
            exit 1
        }
        
        Write-Host "✓ Executable created: $exePath" -ForegroundColor Green
        
        # Verify assets were copied
        $assetsPath = "build\bin\${{ matrix.configuration }}\assets"
        if (-not (Test-Path $assetsPath)) {
            Write-Error "Assets directory not found at expected path: $assetsPath"
            exit 1
        }
        
        Write-Host "✓ Assets copied to: $assetsPath" -ForegroundColor Green
        
        # Test that the executable runs (basic test)
        Write-Host "Testing executable startup..." -ForegroundColor Yellow
        $testResult = & $exePath --help 2>&1
        $exitCode = $LASTEXITCODE
        
        # Check if it's the test main or app main
        if ($testResult -match "Google Test" -or $testResult -match "gtest") {
            Write-Error "Executable is running test main instead of app main!"
            Write-Host "Output: $testResult" -ForegroundColor Red
            exit 1
        }
        
        Write-Host "✓ Executable runs correctly (exit code: $exitCode)" -ForegroundColor Green
        
        # Display file info
        $exeInfo = Get-Item $exePath
        Write-Host ""
        Write-Host "Build Summary:" -ForegroundColor Cyan
        Write-Host "  Executable: $($exeInfo.FullName)" -ForegroundColor White
        Write-Host "  Size: $([math]::Round($exeInfo.Length / 1MB, 2)) MB" -ForegroundColor White
        Write-Host "  Created: $($exeInfo.CreationTime)" -ForegroundColor White
        
        Write-Host ""
        Write-Host "========================================" -ForegroundColor Cyan
        Write-Host "✓ Visual Studio build validation PASSED" -ForegroundColor Green
        Write-Host "========================================" -ForegroundColor Cyan

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: yaze-${{ matrix.platform }}-${{ matrix.configuration }}
        path: |
          build/bin/${{ matrix.configuration }}/
        retention-days: 7
