name: Windows Build Fallback

on:
  workflow_call:
    inputs:
      build_type:
        description: 'Build type (Debug/Release)'
        required: true
        type: string
        default: 'Release'
      platform:
        description: 'Platform (x64/x86)'
        required: true
        type: string
        default: 'x64'

env:
  BUILD_TYPE: ${{ inputs.build_type }}
  PLATFORM: ${{ inputs.platform }}

jobs:
  build-windows-fallback:
    name: Windows ${{ inputs.platform }} ${{ inputs.build_type }} (Fallback)
    runs-on: windows-2022
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    # Try vcpkg first
    - name: Set up vcpkg (Primary)
      id: vcpkg_primary
      uses: lukka/run-vcpkg@v11
      continue-on-error: true
      with:
        vcpkgGitCommitId: 'c8696863d371ab7f46e213d8f5ca923c4aef2a00'
        runVcpkgInstall: true
        vcpkgJsonGlob: '**/vcpkg.json'
        vcpkgDirectory: '${{ github.workspace }}/vcpkg'
        vcpkgTriplet: '${{ inputs.platform }}-windows'
        vcpkgArguments: '--x-install-root="${{ github.workspace }}/vcpkg_installed"'
      env:
        VCPKG_FORCE_SYSTEM_BINARIES: 1
        VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

    # Fallback to newer baseline if primary fails
    - name: Set up vcpkg (Fallback)
      if: steps.vcpkg_primary.outcome == 'failure'
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '2024.01.12'
        runVcpkgInstall: true
        vcpkgJsonGlob: '**/vcpkg.json.backup'
        vcpkgDirectory: '${{ github.workspace }}/vcpkg'
        vcpkgTriplet: '${{ inputs.platform }}-windows'
        vcpkgArguments: '--x-install-root="${{ github.workspace }}/vcpkg_installed"'
      env:
        VCPKG_FORCE_SYSTEM_BINARIES: 1
        VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

    # Fallback to manual dependency installation if both vcpkg attempts fail
    - name: Install dependencies manually
      if: steps.vcpkg_primary.outcome == 'failure'
      shell: pwsh
      run: |
        Write-Host "Installing dependencies manually using Chocolatey and pre-built libraries..."
        
        # Install Chocolatey if not present
        if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        }
        
        # Install basic dependencies
        choco install -y cmake ninja
        
        # Create a minimal build configuration
        Write-Host "Creating minimal build configuration for CI..."
        
        # Set up environment variables for minimal build
        echo "YAZE_MINIMAL_BUILD=ON" >> $env:GITHUB_ENV
        echo "CMAKE_PREFIX_PATH=$env:GITHUB_WORKSPACE\vcpkg_installed\${{ inputs.platform }}-windows" >> $env:GITHUB_ENV

    - name: Configure CMake
      shell: cmd
      run: |
        if exist "${{ github.workspace }}\vcpkg_installed" (
          echo "Using vcpkg installation..."
          cmake -B build ^
            -DCMAKE_BUILD_TYPE=%BUILD_TYPE% ^
            -DCMAKE_POLICY_VERSION_MINIMUM=3.16 ^
            -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" ^
            -DYAZE_BUILD_TESTS=OFF ^
            -DYAZE_BUILD_EMU=OFF ^
            -DYAZE_BUILD_Z3ED=OFF ^
            -DYAZE_ENABLE_ROM_TESTS=OFF ^
            -DYAZE_ENABLE_EXPERIMENTAL_TESTS=OFF ^
            -DYAZE_INSTALL_LIB=OFF ^
            -DYAZE_MINIMAL_BUILD=ON ^
            -G "Visual Studio 17 2022" ^
            -A %PLATFORM%
        ) else (
          echo "Using minimal build configuration..."
          cmake -B build ^
            -DCMAKE_BUILD_TYPE=%BUILD_TYPE% ^
            -DCMAKE_POLICY_VERSION_MINIMUM=3.16 ^
            -DYAZE_BUILD_TESTS=OFF ^
            -DYAZE_BUILD_EMU=OFF ^
            -DYAZE_BUILD_Z3ED=OFF ^
            -DYAZE_ENABLE_ROM_TESTS=OFF ^
            -DYAZE_ENABLE_EXPERIMENTAL_TESTS=OFF ^
            -DYAZE_INSTALL_LIB=OFF ^
            -DYAZE_MINIMAL_BUILD=ON ^
            -G "Visual Studio 17 2022" ^
            -A %PLATFORM%
        )

    - name: Build
      run: cmake --build build --config %BUILD_TYPE% --parallel

    - name: Test executable
      shell: pwsh
      run: |
        $exePath = "build\bin\$env:BUILD_TYPE\yaze.exe"
        if (Test-Path $exePath) {
          Write-Host "✓ Executable created: $exePath" -ForegroundColor Green
          
          # Test that it's not the test main
          $testResult = & $exePath --help 2>&1
          if ($testResult -match "Google Test" -or $testResult -match "gtest") {
            Write-Error "Executable is running test main instead of app main!"
            exit 1
          }
          
          Write-Host "✓ Executable runs correctly" -ForegroundColor Green
        } else {
          Write-Error "Executable not found at: $exePath"
          exit 1
        }

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: yaze-${{ inputs.platform }}-${{ inputs.build_type }}-fallback
        path: |
          build/bin/${{ inputs.build_type }}/
        retention-days: 7
