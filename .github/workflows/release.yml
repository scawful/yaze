# .github/workflows/release.yml

name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-*' # e.g., v1.2.3-beta, v1.2.3-rc1
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v0.3.0)'
        required: true
        type: string

concurrency:
  group: release-${{ github.ref_name || github.event.inputs.tag }}
  cancel-in-progress: true

permissions:
  contents: write

env:
  BUILD_TYPE: Release

jobs:
  # ======================================================================================
  #  VALIDATE & PREPARE RELEASE
  # ======================================================================================
  prepare-release:
    name: "‚úÖ Validate & Prepare"
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.validate.outputs.tag_name }}
      release_notes: ${{ steps.notes.outputs.content }}
      is_prerelease: ${{ steps.validate.outputs.is_prerelease }}

    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for changelog extraction

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: "Determine & Validate Tag"
        id: validate
        shell: bash
        run: |
          set -euo pipefail
          
          if [[ "${{ github.event_name }}" == "push" ]]; then
            TAG="${{ github.ref_name }}"
          else
            TAG="${{ github.event.inputs.tag }}"
          fi

          echo "Validating tag: ${TAG}"
          if [[ ! "${TAG}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
            echo "::error::Tag '${TAG}' must follow semantic versioning (e.g., v1.2.3 or v1.2.3-beta)."
            exit 1
          fi

          # Determine if it's a pre-release
          if [[ "${TAG}" =~ - ]]; then
            echo "is_prerelease=true" >> "$GITHUB_OUTPUT"
          else
            echo "is_prerelease=false" >> "$GITHUB_OUTPUT"
          fi

          echo "tag_name=${TAG}" >> "$GITHUB_OUTPUT"
          echo "VALIDATED_TAG=${TAG}" >> "$GITHUB_ENV"
          echo "‚úÖ Tag is valid and processed."

      - name: "Generate Release Notes"
        shell: bash
        run: |
          set -euo pipefail
          VERSION="${VALIDATED_TAG#v}"
          
          if [[ -f scripts/extract_changelog.py ]]; then
            echo "Attempting to extract changelog for version ${VERSION}..."
            python3 scripts/extract_changelog.py "${VERSION}" > release_notes.md
          else
            echo "::warning::'scripts/extract_changelog.py' not found. Creating default release notes."
            echo "# Yaze ${{ env.VALIDATED_TAG }} Release Notes" > release_notes.md
            echo "" >> release_notes.md
            echo "For a detailed list of changes, please see the project's commit history or changelog file." >> release_notes.md
          fi
          
          echo "Generated release notes:"
          cat release_notes.md

      - name: "Store Release Notes"
        id: notes
        shell: bash
        run: |
          {
            echo 'content<<EOF'
            cat release_notes.md
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

  # ======================================================================================
  #  BUILD & PACKAGE
  # ======================================================================================
  build-and-package:
    name: "üì¶ Build (${{ matrix.name }})"
    needs: prepare-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Windows x64"
            os: windows-2022
            vcpkg_triplet: x64-windows
            cmake_generator: "Visual Studio 17 2022"
            cmake_generator_platform: x64
            artifact_name: "yaze-windows-x64"
          - name: "Windows arm64"
            os: windows-2022
            vcpkg_triplet: arm64-windows
            cmake_generator: "Visual Studio 17 2022"
            cmake_generator_platform: ARM64
            artifact_name: "yaze-windows-arm64"
          - name: "macOS arm64"
            os: macos-14
            vcpkg_triplet: arm64-osx
            mac_arch: arm64
            artifact_name: "yaze-macos-arm64-slice"
          - name: "macOS x86_64"
            os: macos-14
            vcpkg_triplet: x64-osx
            mac_arch: x86_64
            artifact_name: "yaze-macos-x86_64-slice"
          - name: "Linux x64"
            os: ubuntu-22.04
            artifact_name: "yaze-linux-x64"

    runs-on: ${{ matrix.os }}

    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: "Install Dependencies (Linux)"
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential ninja-build pkg-config libglew-dev libxext-dev libwavpack-dev libabsl-dev libboost-all-dev libpng-dev python3-dev libpython3-dev libasound2-dev libpulse-dev libx11-dev libxrandr-dev libxcursor-dev libxinerama-dev libxi-dev

      - name: "Install Dependencies (macOS)"
        if: runner.os == 'macOS'
        run: brew install ninja cmake

      - name: "Set up vcpkg"
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: '4334d8b4c8916018600212ab4dd4bbdc343065d1'
          runVcpkgInstall: true
        env:
          VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
          VCPKG_DEFAULT_TRIPLET: ${{ matrix.vcpkg_triplet }}

      - name: "Configure CMake"
        shell: bash
        run: |
          set -x
          CMAKE_ARGS=(
            "-S ."
            "-B build"
            "-DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}"
            "-DYAZE_BUILD_TESTS=OFF"
            "-DYAZE_BUILD_EMU=OFF"
            "-DYAZE_BUILD_Z3ED=ON"
          )

          if [[ "${{ runner.os }}" == "Windows" ]]; then
            CMAKE_ARGS+=(
              "-G" "${{ matrix.cmake_generator }}"
              "-A" "${{ matrix.cmake_generator_platform }}"
              "-DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake"
            )
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            CMAKE_ARGS+=(
              "-G" "Ninja"
              "-DCMAKE_OSX_ARCHITECTURES=${{ matrix.mac_arch }}"
              "-DCMAKE_OSX_DEPLOYMENT_TARGET=11.0"
              "-DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake"
            )
          else # Linux
            CMAKE_ARGS+=("-G" "Ninja")
          fi

          cmake "${CMAKE_ARGS[@]}"

      - name: "Build Project"
        run: cmake --build build --config ${{ env.BUILD_TYPE }} --parallel

      - name: "Package Artifacts"
        shell: bash
        run: |
          set -euo pipefail
          ARTIFACT_NAME="${{ matrix.artifact_name }}"
          
          # Create staging directory
          mkdir -p stage
          
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp -r build/bin/${{ env.BUILD_TYPE }}/* stage/
            cp -r assets/ stage/assets/
            cp LICENSE README.md stage/
            (cd stage && powershell -Command "Compress-Archive -Path * -DestinationPath ../${ARTIFACT_NAME}.zip")
            echo "Created ${ARTIFACT_NAME}.zip"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            # For macOS, we stage the .app bundle as a "slice" for the universal merge job
            cp -R build/bin/yaze.app stage/
            echo "Staged yaze.app slice for ${ARTIFACT_NAME}"
          else # Linux
            cp build/bin/yaze stage/
            cp -r assets/ stage/assets/
            cp LICENSE README.md stage/
            tar -czf "${ARTIFACT_NAME}.tar.gz" -C stage .
            echo "Created ${ARTIFACT_NAME}.tar.gz"
          fi

      - name: "Upload Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ matrix.artifact_name }}.zip
            ${{ matrix.artifact_name }}.tar.gz
            stage/
          if-no-files-found: error
          retention-days: 5

  # ======================================================================================
  #  MERGE MACOS & CREATE UNIVERSAL BINARY
  # ======================================================================================
  merge-macos-universal:
    name: "üçé Merge macOS Universal"
    needs: build-and-package
    runs-on: macos-14
    steps:
      - name: "Download arm64 Slice"
        uses: actions/download-artifact@v4
        with:
          name: yaze-macos-arm64-slice
          path: arm64-slice

      - name: "Download x86_64 Slice"
        uses: actions/download-artifact@v4
        with:
          name: yaze-macos-x86_64-slice
          path: x86_64-slice

      - name: "Create Universal Binary"
        shell: bash
        run: |
          set -euo pipefail
          ARM_APP="arm64-slice/yaze.app"
          X64_APP="x86_64-slice/yaze.app"
          
          # Use the arm64 bundle as the base
          cp -R "${ARM_APP}" ./yaze.app
          
          echo "Merging executables..."
          lipo -create "${ARM_APP}/Contents/MacOS/yaze" "${X64_APP}/Contents/MacOS/yaze" -output "./yaze.app/Contents/MacOS/yaze"
          
          echo "Verifying universal binary..."
          lipo -info "./yaze.app/Contents/MacOS/yaze"
          
          echo "Creating DMG..."
          hdiutil create -fs HFS+ -srcfolder ./yaze.app -volname "yaze ${{ needs.prepare-release.outputs.tag_name }}" yaze-macos-universal.dmg

      - name: "Upload Universal macOS Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: yaze-macos-universal
          path: yaze-macos-universal.dmg
          if-no-files-found: error
          retention-days: 5

  # ======================================================================================
  #  CREATE GITHUB RELEASE
  # ======================================================================================
  create-github-release:
    name: "üöÄ Create GitHub Release"
    needs: [prepare-release, build-and-package, merge-macos-universal]
    runs-on: ubuntu-latest
    steps:
      - name: "Download All Artifacts"
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: "List Artifacts"
        run: ls -lR dist

      - name: "Create/Update Release"
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare-release.outputs.tag_name }}
          name: "yaze ${{ needs.prepare-release.outputs.tag_name }}"
          body: ${{ needs.prepare-release.outputs.release_notes }}
          draft: false
          prerelease: ${{ needs.prepare-release.outputs.is_prerelease }}
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
